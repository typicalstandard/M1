import pandas as pd

# Создаём DataFrame для таблицы товаров
data_items = {
    "item_id": [1, 2, 1, 3, 2, 1, 2],
    "name": [
        "Ручка гелевая",
        "Карандаш 1HH",
        "Ручка шариковая",
        "Ластик",
        "Карандаш 1HH",
        "Ручка шариковая",
        "Карандаш 1H"
    ],
    "price": [10, 2, 10, 5, 3, 5, 7],
    "update_date": [
        "2020-02-01",
        "2020-01-01",
        "2020-03-01",
        "2020-07-01",
        "2020-05-01",
        "2020-05-01",
        "2020-06-01"
    ]
}
df_items = pd.DataFrame(data_items)
df_items["update_date"] = pd.to_datetime(df_items["update_date"])

# Создаём DataFrame для таблицы заказов
data_orders = {
    "order_id": [1, 2, 3, 4, 5, 6],
    "user_id": [1, 2, 1, 3, 2, 1],
    "item_id": [1, 2, 3, 2, 1, 1],
    "order_date": [
        "2020-02-01",
        "2020-02-01",
        "2020-07-01",
        "2020-07-01",
        "2020-04-01",
        "2020-06-01"
    ]
}
df_orders = pd.DataFrame(data_orders)
df_orders["order_date"] = pd.to_datetime(df_orders["order_date"])

# Актуальное состояние товаров на 2020-06-01
date_ref = pd.Timestamp("2020-06-01")
df_items_current = (df_items[df_items["update_date"] <= date_ref]
                    .sort_values("update_date")
                    .groupby("item_id", as_index=False)
                    .last())
print("1. Актуальное состояние товаров на 2020-06-01:")
print(df_items_current)
print("\n")

# Объединение заказов с таблицей товаров через merge_asof
df_orders_sorted = df_orders.sort_values("order_date")
df_items_sorted = df_items.sort_values("update_date")
df_merged = pd.merge_asof(df_orders_sorted,
                          df_items_sorted,
                          left_on="order_date",
                          right_on="update_date",
                          by="item_id",
                          direction="backward")

# Товары, купленные по цене больше или равно чем 3
df_filtered = df_merged[df_merged["price"] >= 3]
print("2. Заказы с ценой товара >= 3:")
print(df_filtered)
print("\n")

# Сумма покупок клиента 1
client1_total = df_merged[df_merged["user_id"] == 1]["price"].sum()
print("3. Сумма покупок клиента 1:", client1_total)
print("\n")

# Сумма всех покупок до 2020-05-01 включительно
date_limit = pd.Timestamp("2020-05-01")
total_before_limit = df_merged[df_merged["order_date"] <= date_limit]["price"].sum()
print("4. Сумма всех покупок до 2020-05-01 включительно:", total_before_limit)
print("\n")

# Сумма всех заказов и среднее цена заказа поквартально
df_merged["quarter"] = df_merged["order_date"].dt.to_period("Q")
quarterly_stats = (df_merged.groupby("quarter")
                   .agg(total_order_amount=("price", "sum"),
                        avg_order_price=("price", "mean"))
                   .reset_index())
print("5. Поквартальная агрегация заказов (сумма и средняя цена заказа):")
print(quarterly_stats)
print("\n")

# Оптимизация запросов для больших объемов данных
###
1.Предварительная подготовка данных.
  ***Сортировка
   - Для merge_asof, данные должны быть отсортированы по столбцу с датами (например, update_date и order_date).
  ***Уменьшение типов данных
  ***Индексация

2.Оптимизация операций.
 ***Векторизация.
  - Использование векторизированных операций pandas с помощью NumPy вместо циклов.
 ***Использование категориальных данных

3.Проблемы с памятью и масштабирование 
  ***Кэширование промежуточных результатов.
  ***Разделение на чанки.
    - Если данные не помещаются в память, можно разбивать их на части с помощью numpy (numpy.array_split) или метода cut.

4.Переход на распределённые вычисления.
   - Можно использовать  Dask или PySpark, если данные вылазят за память и нужна параллельная обработка данных.
###
